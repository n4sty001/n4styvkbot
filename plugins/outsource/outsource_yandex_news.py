from handler.base_plugin import CommandPlugin
from utils import Message

from random import choice

import aiohttp, xmltodict


class YandexNewsPlugin(CommandPlugin):
    __slots__ = ("error", "main_commands", "help_words")

    news = {"–∞—Ä–º–∏—è": "https://news.yandex.ru/army.rss",
            "–∞–≤—Ç–æ": "https://news.yandex.ru/auto.rss",
            "–º–∏—Ä": "https://news.yandex.ru/world.rss",
            "–≥–ª–∞–≤–Ω–æ–µ": "https://news.yandex.ru/index.rss",
            "–∏–≥—Ä—ã": "https://news.yandex.ru/games.rss",
            "–∏–Ω—Ç–µ—Ä–µ–Ω–µ—Ç": "https://news.yandex.ru/internet.rss",
            "–∫–∏–Ω–æ": "https://news.yandex.ru/movies.rss",
            "–º—É–∑—ã–∫–∞": "https://news.yandex.ru/music.rss",
            "–ø–æ–ª–∏—Ç–∏–∫–∞": "https://news.yandex.ru/politics.rss",
            "–Ω–∞—É–∫–∞": "https://news.yandex.ru/science.rss",
            "—ç–∫–æ–Ω–æ–º–∏–∫–∞": "https://news.yandex.ru/business.rss",
            "—Å–ø–æ—Ä—Ç": "https://news.yandex.ru/sport.rss",
            "–ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è": "https://news.yandex.ru/incident.rss",
            "–∫–æ—Å–º–æ—Å": "https://news.yandex.ru/cosmos.rss"}

    def __init__(self, main_commands=None, help_words=None, prefixes=None,
                 strict=False, error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."):
        """Answers with a news from News.Yandex."""

        if not main_commands:
            main_commands = ("–Ω–æ–≤–æ—Å—Ç–∏",)

        super().__init__(*main_commands, prefixes=prefixes, strict=strict)

        self.main_commands = main_commands
        self.help_words = help_words if help_words else ["–ø–æ–º–æ—â—å", "help", "—Ç–µ–º—ã"]

        self.error = error

        self.set_description()

    def set_description(self):
        p = self.prefixes[-1] if self.prefixes else ""
        self.description = [f"–ù–æ–≤–æ—Å—Ç–∏",
                            f"–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.",
                            f"{p}{self.main_commands[0]} - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å.",
                            f"{p}{self.main_commands[0]} [—Ç–µ–º–∞] - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å.",
                            f"{p}{self.main_commands[0]} {self.help_words[0]} - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã."]

    async def process_message(self, msg: Message):
        command, text = self.parse_message(msg)

        if text.lower() in self.help_words:
            return await msg.answer("–ü–æ–º–æ—â—å:\n" + "\n".join(self.description) + "\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n" +
                                    ', '.join([k.capitalize() for k in self.news.keys()]))

        url = self.news["–≥–ª–∞–≤–Ω–æ–µ"]
        if text.lower() in self.news:
            url = self.news[text]

        async with aiohttp.ClientSession() as sess:
            async with sess.get(url) as resp:
                xml = xmltodict.parse(await resp.text())

                if "rss" not in xml or "channel" not in xml["rss"] or "item" not in xml["rss"]["channel"]:
                    return await msg.answer(self.error)

                items = xml["rss"]["channel"]["item"]
                item = choice(items)

                if "title" not in item or "description" not in item:
                    return await msg.answer(self.error)

                return await msg.answer(f'üëâ {item["title"]}\n'
                                        f'üëâ {item["description"]}')
