from handler.base_plugin import CommandPlugin

from utils import upload_photo
import aiohttp, random, string

BASE_API_URL = 'https://node-01.faceapp.io/api/v2.3/photos'  # Ensure no slash at the end.
BASE_HEADERS = {'User-agent': "FaceApp/1.0.229 (Linux; Android 4.4)"}
DEVICE_ID_LENGTH = 8
KNOWN_FILTERS = ('smile', 'smile_2', 'hot', 'old', 'young', 'female', 'male',
                 'hollywood', 'fun_glasses', 'hitman', 'mustache_free', 'pan', 'heisenberg')

# Thanks to https://github.com/vasilysinitsin/Faces

class FacePlugin(CommandPlugin):
    __slots__ = ("filters", "command")

    def __init__(self, *commands, prefixes=None, strict=False):
        """Plugin using FaceApp for changing photo."""

        if not commands:
            commands = ("—Å–¥–µ–ª–∞–π", "—Ñ–∏–ª—å—Ç—Ä")

        super().__init__(*commands, prefixes=prefixes, strict=strict)

        self.filters = {
            '—É–ª—ã–±–∫–∞2': 'smile_2',

            '–≤–µ—Å—ë–ª–æ–π': 'smile',
            '–≤–µ—Å—ë–ª—ã–º': 'smile',
            '–≤–µ—Å–µ–ª–æ': 'smile',

            '—Å—Ç–∞—Ä—ã–º': 'old',
            '—Å—Ç–∞—Ä–æ–π': 'old',

            '–º–æ–ª–æ–¥—ã–º': 'young',
            '–º–æ–ª–æ–¥–æ–π': 'young',

            '–º—É–∂—á–∏–Ω–æ–π': 'male',
            '–º—É–∂–∏–∫–æ–º': 'male',
            '–ø–∞—Ä–Ω–µ–º': 'male',
            '–ø–æ—Ü–µ–º': 'male',

            '–∂–µ–Ω—â–∏–Ω–æ–π': 'female',
            '—Ç—ë–ª–∫–æ–π': 'female',
            '—Ç—ë—Ç–µ–π': 'female',
            '–∫–∏—Å–æ–π': 'female',

            # –í—ã –º–æ–∂–µ—Ç–µ –¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –∏–º–µ–Ω—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ KNOWN_FILTERS –∑–¥–µ—Å—å
        }

        self.command = self.command_example()

        self.description = [f"FaceApp –§–∏–ª—å—Ç—Ä",
            f"{self.command} - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å.",
            f"{self.command} <—Ñ–∏–ª—å—Ç—Ä> - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä."]

    @staticmethod
    def _generate_device_id():
        device_id = ''.join(random.choice(string.ascii_letters) for _ in range(DEVICE_ID_LENGTH))
        return device_id

    @staticmethod
    def _generate_headers(device_id):
        BASE_HEADERS.update({'X-FaceApp-DeviceID': device_id})
        return BASE_HEADERS

    async def process_message(self, msg):
        command, text = self.parse_message(msg)
        if not text or text not in self.filters.keys():
            return await msg.answer('üôã‚Äç‚ôÇÔ∏è –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n' + \
                ", ".join(self.filters) + '\n–í–≤–µ–¥–∏—Ç–µ ' + self.command + \
                    ' <—Ñ–∏–ª—å—Ç—Ä> <–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è>')

        if not any(k.endswith('_type') and v == "photo"
            for k, v in msg.brief_attaches.items()):
                return await msg.answer('–í—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ!\n–í–≤–µ–¥–∏—Ç–µ ' + \
                    self.command + ' <—Ñ–∏–ª—å—Ç—Ä> <–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è>')

        photo_url = None
        for a in await msg.get_full_attaches():
            if a.type == "photo" and a.url:
                photo_url = a.url
                break
        else:
            return await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.')

        await msg.answer("–û–¥–Ω—É —Å–µ–∫—É–Ω–¥–æ—á–∫—É...")

        image = None
        async with aiohttp.ClientSession() as sess:
            async with sess.get(photo_url) as resp:
                image = await resp.read()

        if image is None:
            return await msg.answer("–ï—Ä—É–Ω–¥–∞ –∫–∞–∫–∞—è-—Ç–æ! –û—à–∏–±–∫–∞...")

        device_id = self._generate_device_id()
        headers = self._generate_headers(device_id)

        code = None
        async with aiohttp.ClientSession() as sess:
            async with sess.post(BASE_API_URL, headers=headers, data={'file': image}) as resp:
                try:
                    response = await resp.json()
                except ValueError:
                    response = None

                code = response.get('code')

                if code is None:
                    error = resp.headers.get('X-FaceApp-ErrorCode')

                    if error == 'photo_bad_type':
                        return await msg.answer("–ü–ª–æ—Ö–∞—è —É —Ç–µ–±—è –∫–∞—Ä—Ç–∏–Ω–∫–∞, –ø—Ñ")
                    elif error == 'photo_no_faces':
                        return await msg.answer("–ù–µ –≤–∏–∂—É –ª–∏—Ü \\_C:_/")

                    return await msg.answer("–•–º... –û—à–∏–±–∫–∞...")

        filter_name = text.strip().lower()
        filter_name = self.filters.get(filter_name, filter_name)

        if filter_name in ('male', 'female'):
            cropped = 1
        else:
            cropped = 0

        async with aiohttp.ClientSession() as sess:
            async with sess.get(
                    '{0}/{1}/filters/{2}?cropped={3}'.format(
                        BASE_API_URL, code, filter_name, cropped
                    ), headers=headers) as resp:
                image = await resp.read()
                error = resp.headers.get('X-FaceApp-ErrorCode')

                if error:
                    if error == 'bad_filter_id':
                        return await msg.answer("–ö–∞–∫–æ–π-—Ç–æ —Ñ–∏–ª—å—Ç—Ä —É —Ç–µ–±—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—á–µ–Ω—å...")
                    else:
                        return await msg.answer("–ß–æ... –Ø —Å–ª–æ–º–∞–ª—Å—è :(")

                at = await upload_photo(self.api, image)
                if not at:
                    return await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É!")

                return await msg.answer(";)", attachment=at)
