from handler.base_plugin import CommandPlugin


class ChatControlPlugin(CommandPlugin):
    __slots__ = ("banned", "command_add", "command_remove", "command_info",
        "cached")

    def __init__(self, command_add=None, command_remove=None, command_info=None,
            banned=None, prefixes=None, strict=False):
        """Allows admins to ban chats."""

        if not command_add:
            command_add = ("–±–µ—Å–µ–¥–∞ –±–∞–Ω",)

        if not command_info:
            command_info = ("–±–µ—Å–µ–¥–∞ —Ç–µ—Ö–∏–Ω—Ñ–æ",)

        if not command_remove:
            command_remove = ("–±–µ—Å–µ–¥–∞ —Ä–∞–∑–±–∞–Ω",)

        self.command_add = command_add
        self.command_info = command_info
        self.command_remove = command_remove

        super().__init__(*(self.command_add + self.command_remove +
            self.command_info), prefixes=prefixes, strict=strict)

        self.order = (-88, 88)

        self.banned = banned or ()
        self.cached = []

        self.description = [
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —á–∞—Ç–æ–≤",
            self.prefixes[-1] + self.command_info[0] + " [—Å–ø–∏—Å–æ–∫] - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ—Å–µ–¥–µ –∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –±–µ—Å–µ–¥—ã –±–æ—Ç–∞.",
            self.prefixes[-1] + self.command_add[0] + " <id –±–µ—Å–µ–¥—ã> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–µ–¥—É —Å id.",
            self.prefixes[-1] + self.command_remove[0] + " <id –±–µ—Å–µ–¥—ã> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–µ–¥—É —Å id.",
        ]

    async def load(self, entity):
        """Entity is Message or Event"""

        banned = entity.meta["data_meta"].getraw("admin_lists_banned_chats")

        if banned is None:
            banned = entity.meta["data_meta"]["admin_lists_banned_chats"] = \
                list(self.banned)

        if entity.chat_id not in self.cached:
            self.cached = self.cached[-19:] + [entity.chat_id]

        return banned

    async def process_message(self, msg):
        if not msg.chat_id:
            return await msg.answer("ü§úüèª –≠—Ç–æ –Ω–µ –±–µ—Å–µ–¥–∞.")

        command, text = self.parse_message(msg)

        if not msg.meta["is_admin"]:
            return await msg.answer("ü§úüèª –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

        if command in self.command_info:
            if text == "—Å–ø–∏—Å–æ–∫":
                chats = await self.api.messages.getChat(
                    chat_ids=",".join(str(c) for c in self.cached))

                return await msg.answer("–ù–µ–¥–∞–≤–Ω–∏–µ –±–µ—Å–µ–¥—ã:\n" + "\n".join(
                    f"üí¨ –ë–µ—Å–µ–¥–∞ #{chat['id']}: {chat['title']}."
                        for chat in chats))

            return await msg.answer(f"üí¨ –ë–µ—Å–µ–¥–∞ #{msg.chat_id}.")

        if command in self.command_add:
            ptext = text.replace("#", "", 1)

            if not ptext.isdigit():
                return await msg.answer("üëÄ –£–∫–∞–∑–∞–Ω–Ω–∞—è –±–µ—Å–µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            if msg.meta.get("data_meta"):
                msg.meta["data_meta"]["admin_lists_banned_chats"].\
                    append(int(ptext))
            else:
                self.banned.append(int(ptext))

            return await msg.answer(f"üôå –ë–µ—Å–µ–¥–∞ #{ptext} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!")

        if command in self.command_remove:
            ptext = text.replace("#", "", 1)

            if not ptext.isdigit():
                return await msg.answer("üëÄ –£–∫–∞–∑–∞–Ω–Ω–∞—è –±–µ—Å–µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            try:
                if msg.meta.get("data_meta"):
                    msg.meta["data_meta"]["admin_lists_banned_chats"].\
                        remove(int(ptext))
                else:
                    self.banned.remove(int(ptext))
            except ValueError:
                return await msg.answer(f"ü§úüèª –ë–µ—Å–µ–¥–∞ #{ptext} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!")

            return await msg.answer(f"üôå –ë–µ—Å–µ–¥–∞ #{ptext} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!")

    async def global_before_message_checks(self, msg):
        if not msg.chat_id:
            return

        if msg.meta.get("data_meta"):
            return msg.chat_id not in await self.load(msg)

        return msg.chat_id not in self.banned

    async def global_before_event_checks(self, evnt):
        if not hasattr(evnt, "chat_id") or not evnt.chat_id:
            return

        if evnt.meta.get("data_meta"):
            return evnt.chat_id not in await self.load(evnt)

        return evnt.chat_id not in self.banned
