import random

from handler.base_plugin import CommandPlugin


class WhoIsPlugin(CommandPlugin):
    __slots__ = ()

    def __init__(self, *commands, prefixes=None, strict=False):
        """Answers with a random user from conference with a title specified in command."""

        if not commands:
            commands = ("–∫—Ç–æ",)

        super().__init__(*commands, prefixes=prefixes, strict=strict)

        self.set_description()

    def set_description(self):
        example = self.command_example()
        self.description = [f"–ö—Ç–æ –µ—Å—Ç—å –∫—Ç–æ",
                            f"–£–∑–Ω–∞–π—Ç–µ, –∫—Ç–æ –µ—Å—Ç—å –∫—Ç–æ ;)",
                            f"{example} <–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ> - –∫—Ç–æ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —è–≤–ª—è–µ—Ç—Å—è –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."]

    async def process_message(self, msg):
        c, args = self.parse_message(msg)

        if not args:
            return await msg.answer(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {self.command_example()} <—Ç–µ–∫—Å—Ç>\n(–±–µ–∑ `<` –∏–ª–∏ `>`)")

        if msg.is_multichat:
            users = await msg.api.messages.getChatUsers(chat_id=msg.chat_id, fields='name')
            user = random.choice(users)

            await msg.answer(f"–ö—Ç–æ {args}? –Ø –¥—É–º–∞—é, —ç—Ç–æ {user['first_name']} {user['last_name']} üôà")

        else:
            await msg.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–µ.")
