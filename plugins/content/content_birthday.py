import datetime

from handler.base_plugin import CommandPlugin
from utils import plural_form, age


class BirthdayPlugin(CommandPlugin):
    __slots__ = ("max_users_in_group", )

    def __init__(self, *commands, prefixes=None, strict=False, max_users_in_group=1000):
        """Answers with birthday for users in group (but no more than `max_users_in_group`), for users in conference."""

        if not commands:
            commands = ("–¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è",)

        super().__init__(*commands, prefixes=prefixes, strict=strict)

        self.max_users_in_group = max_users_in_group

        self.set_description()

    def set_description(self):
        example = self.command_example()
        self.description = [f"–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è",
                            f"–í—ã–≤–æ–¥ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –ª—é–¥–µ–π –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –≤ –±–µ—Å–µ–¥–µ.",
                            f"{example} - –ø–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ –∫–æ–∂–¥–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.",
                            f"{example} <id –≥—Ä—É–ø–ø—ã> - –ø–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—É."]

    async def process_message(self, msg):
        command, argument = self.parse_message(msg)

        if argument:
            members = []

            offset = 0

            while True:
                result = await msg.api.groups.getMembers(group_id=argument, offset=offset, fields="bdate")

                if not result or "items" not in result or not result["items"]:
                    if offset == 0:
                        return await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∏–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ!")

                    break

                members += result["items"]

                offset += 1000

                if result["count"] > self.max_users_in_group:
                    await msg.answer(f"–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–∑–Ω–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∏—Ö –ª—é–¥–µ–π!\n"
                                     f"–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –ª–∏—à—å {self.max_users_in_group} –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

                break

            message = f"–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ \"{argument}\" ‚ú®:\n"

        else:
            if not msg.is_multichat:
                members = await msg.api.users.get(user_ids=msg.user_id, fields="bdate")

                message = f"–í–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ‚ú®:\n"

            else:
                members = await msg.api.messages.getChatUsers(chat_id=msg.chat_id, fields="bdate")

                message = f"–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ—Å–µ–¥–µ ‚ú®:\n"

        data = []

        now = datetime.datetime.today().date()

        for m in members:
            if "bdate" not in m or "deactivated" in m:
                continue

            try:
                if m['bdate'].count(".") > 1:
                    year = True
                    user_date = datetime.datetime.strptime(m['bdate'], '%d.%m.%Y').date()

                else:
                    year = False
                    user_date = datetime.datetime.strptime(m['bdate'], '%d.%m').date()

            except ValueError:
                continue

            try:
                check_date = user_date.replace(year=now.year)

            except ValueError:
                check_date = user_date + (datetime.date(now.year, 1, 1) - datetime.date(user_date.year, 1, 1))

            difference = check_date - now

            if difference.days < 0:
                check_date = check_date.replace(year=now.year + 1)

                difference = check_date - now

            bdate_in = " (–±—É–¥–µ—Ç —á–µ—Ä–µ–∑ " + plural_form(difference.days, ("–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")) + ")"

            if year:
                bdate_in = bdate_in[:-1] + ", –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è " + plural_form(age(user_date) + 1,
                                                                         ("–≥–æ–¥", "–≥–æ–¥–∞", "–ª–µ—Ç")) + ")"

            data.append((" üåç " + m["first_name"] + " " + m["last_name"] + ": "
                         + user_date.strftime("%d.%m") + bdate_in,
                         difference.days))

        message += "\n".join(d[0] for d in sorted(data, key=lambda x: x[1]))

        return await msg.answer(message)
